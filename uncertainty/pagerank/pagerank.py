import copy
import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor) -> dict:
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # corpus is a Python dictionary mapping a page name to a set of all pages linked to by that page.
    # damping_factor is a floating point number representing the damping factor to be used when generating the probabilities.
    # page is a string representing which page the random surfer is currently on.
    rank = dict()

    # NumLinks(i) is the number of links present on page i.    
    num_links = dict()
    pages = list(corpus.keys())
    for i in pages:
        num_links[i] = len(corpus.get(i)) if i in corpus else 0

    if num_links[page] != 0:
        for key in corpus.keys():
            if key in corpus[page]:
                rank[key] = (1 - damping_factor) / len(corpus.keys()) + (damping_factor * (1 / num_links[page]))
            else:
                rank[key] = (1 - damping_factor) / len(corpus.keys())
    else:
        for key in corpus.keys():
            rank[key] = 1 / len(corpus.keys())

    return rank


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # corpus is a Python dictionary mapping a page name to a set of all pages linked to by that page.
    # damping_factor is a floating point number representing the damping factor to be used when generating the probabilities.
    # n is an integer representing the number of samples to take.

    # the first sample should be generated by choosing from a page at random.
    pages = list(corpus.keys())
    page_counts = {page: 0 for page in pages}

    current_page = random.choice(pages)
    page_counts[current_page] += 1

    # generate the next sample from the ranking of each page from the previous sample.
    for _ in range(n - 1):
        transition_result = transition_model(corpus, current_page, damping_factor)
        current_page = random.choices(list(transition_result.keys()), list(transition_result.values()))[0]
        page_counts[current_page] += 1

    rank = {page: count / n for page, count in page_counts.items()}
    return rank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    N = len(corpus)
    threshold = 0.001
    ranks = {page: 1/N for page in corpus}

    while True:
        new_ranks = {}
        total_diff = 0

        for page in corpus:
            # Sum contributions from linking pages
            rank_sum = 0
            for linking_page in corpus:
                # Handle dangling nodes (treat as linking to all pages)
                links = corpus[linking_page] or corpus.keys()
                if page in links:
                    rank_sum += ranks[linking_page] / len(links)
            
            # Apply PageRank formula
            new_rank = (1 - damping_factor)/N + damping_factor * rank_sum
            new_ranks[page] = new_rank
            total_diff += abs(new_rank - ranks[page])

        ranks = new_ranks
        if total_diff < threshold:
            break
    
    return ranks


if __name__ == "__main__":
    main()